import { BehaviorSubject, from } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
export class StripeInstance {
    version;
    loader;
    window;
    key;
    options;
    stripe$ = new BehaviorSubject(undefined);
    stripe = this.stripe$.asObservable().pipe(filter((stripe) => Boolean(stripe)));
    constructor(version, loader, window, key, options) {
        this.version = version;
        this.loader = loader;
        this.window = window;
        this.key = key;
        this.options = options;
        this.loader
            .asStream()
            .pipe(filter((status) => status.loaded === true), first(), map(() => this.window.getNativeWindow().Stripe))
            .subscribe((stripeInstance) => {
            const stripe = this.options
                ? stripeInstance(this.key, this.options)
                : stripeInstance(this.key);
            stripe.registerAppInfo(this.getNgxStripeAppInfo(this.version));
            this.stripe$.next(stripe);
        });
    }
    getInstance() {
        return this.stripe$.getValue();
    }
    elements(options) {
        return this.stripe.pipe(map((stripe) => stripe.elements(options)), first());
    }
    redirectToCheckout(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.redirectToCheckout(options))), first());
    }
    confirmPayment(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPayment(options))), first());
    }
    confirmAcssDebitPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAcssDebitPayment(clientSecret, data, options))), first());
    }
    confirmUsBankAccountPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmUsBankAccountPayment(clientSecret, data))), first());
    }
    confirmAlipayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAlipayPayment(clientSecret, data, options))), first());
    }
    confirmAuBecsDebitPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAuBecsDebitPayment(clientSecret, data))), first());
    }
    confirmBancontactPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmBancontactPayment(clientSecret, data, options))), first());
    }
    confirmBlikPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmBlikPayment(clientSecret, data, options))), first());
    }
    confirmBoletoPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmBoletoPayment(clientSecret, data, options))), first());
    }
    confirmCardPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmCardPayment(clientSecret, data, options))), first());
    }
    confirmCashappPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmCashappPayment(clientSecret, data, options))), first());
    }
    confirmCustomerBalancePayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmCustomerBalancePayment(clientSecret, data, options))), first());
    }
    confirmEpsPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmEpsPayment(clientSecret, data, options))), first());
    }
    confirmFpxPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmFpxPayment(clientSecret, data, options))), first());
    }
    confirmGiropayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmGiropayPayment(clientSecret, data, options))), first());
    }
    confirmGrabPayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmGrabPayPayment(clientSecret, data, options))), first());
    }
    confirmIdealPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmIdealPayment(clientSecret, data, options))), first());
    }
    confirmKlarnaPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmKlarnaPayment(clientSecret, data, options))), first());
    }
    confirmKonbiniPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmKonbiniPayment(clientSecret, data, options))), first());
    }
    confirmMobilepayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmMobilepayPayment(clientSecret, data, options))), first());
    }
    confirmOxxoPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmOxxoPayment(clientSecret, data, options))), first());
    }
    confirmP24Payment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmP24Payment(clientSecret, data, options))), first());
    }
    confirmPayNowPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPayNowPayment(clientSecret, data, options))), first());
    }
    confirmPayPalPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPayPalPayment(clientSecret, data))), first());
    }
    confirmPixPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPixPayment(clientSecret, data, options))), first());
    }
    confirmPromptPayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPromptPayPayment(clientSecret, data, options))), first());
    }
    confirmSepaDebitPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmSepaDebitPayment(clientSecret, data))), first());
    }
    confirmSofortPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmSofortPayment(clientSecret, data, options))), first());
    }
    confirmWechatPayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmWechatPayPayment(clientSecret, data, options))), first());
    }
    handleCardAction(clientSecret) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.handleCardAction(clientSecret))), first());
    }
    handleNextAction(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.handleNextAction(options))), first());
    }
    verifyMicrodepositsForPayment(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.verifyMicrodepositsForPayment(clientSecret, data))), first());
    }
    createRadarSession() {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.createRadarSession())), first());
    }
    collectBankAccountForPayment(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.collectBankAccountForPayment(options))), first());
    }
    createPaymentMethod(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.createPaymentMethod(options))), first());
    }
    createConfirmationToken(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.createConfirmationToken(options))), first());
    }
    retrievePaymentIntent(clientSecret) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.retrievePaymentIntent(clientSecret))), first());
    }
    confirmSetup(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmSetup(options))), first());
    }
    confirmAcssDebitSetup(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAcssDebitSetup(clientSecret, data, options))), first());
    }
    confirmUsBankAccountSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmUsBankAccountSetup(clientSecret, data))), first());
    }
    confirmAuBecsDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAuBecsDebitSetup(clientSecret, data))), first());
    }
    confirmBacsDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmBacsDebitSetup(clientSecret, data))), first());
    }
    confirmBancontactSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmBancontactSetup(clientSecret, data))), first());
    }
    confirmCardSetup(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmCardSetup(clientSecret, data, options))), first());
    }
    confirmCashappSetup(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmCashappSetup(clientSecret, data, options))), first());
    }
    confirmIdealSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmIdealSetup(clientSecret, data))), first());
    }
    confirmPayPalSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPayPalSetup(clientSecret, data))), first());
    }
    confirmSepaDebitSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmSepaDebitSetup(clientSecret, data))), first());
    }
    confirmSofortSetup(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmSofortSetup(clientSecret, data, options))), first());
    }
    confirmAffirmPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAffirmPayment(clientSecret, data, options))), first());
    }
    confirmAfterpayClearpayPayment(clientSecret, data, options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmAfterpayClearpayPayment(clientSecret, data, options))), first());
    }
    verifyMicrodepositsForSetup(clientSecret, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.verifyMicrodepositsForSetup(clientSecret, data))), first());
    }
    collectBankAccountForSetup(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.collectBankAccountForSetup(options))), first());
    }
    retrieveSetupIntent(clientSecret) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.retrieveSetupIntent(clientSecret))), first());
    }
    processOrder(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.processOrder(options))), first());
    }
    retrieveOrder(clientSecret) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.retrieveOrder(clientSecret))), first());
    }
    paymentRequest(options) {
        const stripe = this.getInstance();
        return stripe.paymentRequest(options);
    }
    createToken(tokenType, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.createToken(tokenType, data))), first());
    }
    createSource(a, b) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.createSource(a, b))), first());
    }
    retrieveSource(source) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.retrieveSource(source))), first());
    }
    verifyIdentity(clientSecret) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.verifyIdentity(clientSecret))), first());
    }
    collectFinancialConnectionsAccounts(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.collectFinancialConnectionsAccounts(options))), first());
    }
    collectBankAccountToken(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.collectBankAccountToken(options))), first());
    }
    createEphemeralKeyNonce(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.createEphemeralKeyNonce(options))), first());
    }
    initCustomCheckout(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.initCustomCheckout(options))), first());
    }
    initEmbeddedCheckout(options) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.initEmbeddedCheckout(options))), first());
    }
    /**
     * @deprecated
     */
    handleCardPayment(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.handleCardPayment(clientSecret, element, data))), first());
    }
    /**
     * @deprecated
     */
    confirmPaymentIntent(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmPaymentIntent(clientSecret, element, data))), first());
    }
    /**
     * @deprecated
     */
    handleCardSetup(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.handleCardSetup(clientSecret, element, data))), first());
    }
    /**
     * @deprecated
     */
    confirmSetupIntent(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.confirmSetupIntent(clientSecret, element, data))), first());
    }
    /**
     * @deprecated
     */
    handleFpxPayment(clientSecret, element, data) {
        return this.stripe.pipe(switchMap((stripe) => from(stripe.handleFpxPayment(clientSecret, element, data))), first());
    }
    getNgxStripeAppInfo(version) {
        return {
            name: 'ngx-stripe',
            url: 'https://ngx-stripe.dev',
            partner_id: 'pp_partner_JR4l1rmvUoPP4V',
            version
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWluc3RhbmNlLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXN0cmlwZS9zcmMvbGliL3NlcnZpY2VzL3N0cmlwZS1pbnN0YW5jZS5jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFzSS9ELE1BQU0sT0FBTyxjQUFjO0lBS2Y7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQVJGLE9BQU8sR0FBRyxJQUFJLGVBQWUsQ0FBcUIsU0FBUyxDQUFDLENBQUM7SUFDckUsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQXVCLENBQUM7SUFFckcsWUFDVSxPQUFlLEVBQ2YsTUFBMkIsRUFDM0IsTUFBaUIsRUFDakIsR0FBVyxFQUNYLE9BQWtDO1FBSmxDLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2pCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDWCxZQUFPLEdBQVAsT0FBTyxDQUEyQjtRQUUxQyxJQUFJLENBQUMsTUFBTTthQUNSLFFBQVEsRUFBRTthQUNWLElBQUksQ0FDSCxNQUFNLENBQUMsQ0FBQyxNQUFpQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxFQUNyRSxLQUFLLEVBQUUsRUFDUCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDekQ7YUFDQSxTQUFTLENBQUMsQ0FBQyxjQUFtQixFQUFFLEVBQUU7WUFDakMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU87Z0JBQ3pCLENBQUMsQ0FBRSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFZO2dCQUNwRCxDQUFDLENBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVksQ0FBQztZQUV6QyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBWSxDQUFDO0lBQzNDLENBQUM7SUFLRCxRQUFRLENBQUMsT0FBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLEdBQUcsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUNqRCxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQWtDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQy9ELEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBd0JELGNBQWMsQ0FBQyxPQUFPO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUMzRCxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHVCQUF1QixDQUNyQixZQUFvQixFQUNwQixJQUFrQyxFQUNsQyxPQUF3QztRQUV4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3hGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsMkJBQTJCLENBQ3pCLFlBQW9CLEVBQ3BCLElBQXNDO1FBRXRDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNuRixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELG9CQUFvQixDQUNsQixZQUFvQixFQUNwQixJQUErQixFQUMvQixPQUFxQztRQUVyQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3JGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQseUJBQXlCLENBQ3ZCLFlBQW9CLEVBQ3BCLElBQW9DO1FBRXBDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNqRixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QixDQUN0QixZQUFvQixFQUNwQixJQUFtQyxFQUNuQyxPQUF5QztRQUV6QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3pGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCLENBQ2hCLFlBQW9CLEVBQ3BCLElBQTZCLEVBQzdCLE9BQW1DO1FBRW5DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDbkYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxvQkFBb0IsQ0FDbEIsWUFBb0IsRUFDcEIsSUFBK0IsRUFDL0IsT0FBcUM7UUFFckMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNyRixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUNoQixZQUFvQixFQUNwQixJQUE2QixFQUM3QixPQUFtQztRQUVuQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ25GLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQscUJBQXFCLENBQ25CLFlBQW9CLEVBQ3BCLElBQWdDLEVBQ2hDLE9BQXNDO1FBRXRDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDdEYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCw2QkFBNkIsQ0FDM0IsWUFBb0IsRUFDcEIsSUFBdUMsRUFDdkMsT0FBNkM7UUFFN0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUM5RixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUNmLFlBQW9CLEVBQ3BCLElBQTRCLEVBQzVCLE9BQWtDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDbEYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxpQkFBaUIsQ0FDZixZQUFvQixFQUNwQixJQUE0QixFQUM1QixPQUFrQztRQUVsQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2xGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQscUJBQXFCLENBQ25CLFlBQW9CLEVBQ3BCLElBQWdDLEVBQ2hDLE9BQXNDO1FBRXRDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDdEYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxxQkFBcUIsQ0FDbkIsWUFBb0IsRUFDcEIsSUFBZ0MsRUFDaEMsT0FBc0M7UUFFdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN0RixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELG1CQUFtQixDQUNqQixZQUFvQixFQUNwQixJQUE4QixFQUM5QixPQUFvQztRQUVwQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3BGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsb0JBQW9CLENBQ2xCLFlBQW9CLEVBQ3BCLElBQStCLEVBQy9CLE9BQXFDO1FBRXJDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDckYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxxQkFBcUIsQ0FDbkIsWUFBb0IsRUFDcEIsSUFBZ0MsRUFDaEMsT0FBc0M7UUFFdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN0RixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHVCQUF1QixDQUNyQixZQUFvQixFQUNwQixJQUFrQyxFQUNsQyxPQUF3QztRQUV4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3hGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCLENBQ2hCLFlBQW9CLEVBQ3BCLElBQTZCLEVBQzdCLE9BQW1DO1FBRW5DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDbkYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxpQkFBaUIsQ0FDZixZQUFvQixFQUNwQixJQUE0QixFQUM1QixPQUFrQztRQUVsQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2xGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsb0JBQW9CLENBQ2xCLFlBQW9CLEVBQ3BCLElBQStCLEVBQy9CLE9BQXFDO1FBRXJDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDckYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxZQUFvQixFQUFFLElBQStCO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUM1RSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUNmLFlBQW9CLEVBQ3BCLElBQTRCLEVBQzVCLE9BQWtDO1FBRWxDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDbEYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUIsQ0FDckIsWUFBb0IsRUFDcEIsSUFBa0MsRUFDbEMsT0FBd0M7UUFFeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN4RixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHVCQUF1QixDQUFDLFlBQW9CLEVBQUUsSUFBa0M7UUFDOUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQy9FLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsb0JBQW9CLENBQ2xCLFlBQW9CLEVBQ3BCLElBQStCLEVBQy9CLE9BQXFDO1FBRXJDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDckYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUIsQ0FDckIsWUFBb0IsRUFDcEIsSUFBa0MsRUFDbEMsT0FBd0M7UUFFeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN4RixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQixDQUFDLFlBQW9CO1FBQ25DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ2xFLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsT0FBaUM7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDN0QsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCw2QkFBNkIsQ0FDM0IsWUFBb0IsRUFDcEIsSUFBd0M7UUFFeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3JGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFDeEQsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCw0QkFBNEIsQ0FBQyxPQUE0QztRQUN2RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN6RSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUtELG1CQUFtQixDQUFDLE9BQU87UUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDaEUsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxPQUFnQztRQUN0RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNwRSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHFCQUFxQixDQUFDLFlBQW9CO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ3ZFLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBd0JELFlBQVksQ0FBQyxPQUFPO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN6RCxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHFCQUFxQixDQUNuQixZQUFvQixFQUNwQixJQUFnQyxFQUNoQyxPQUFzQztRQUV0QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3RGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQseUJBQXlCLENBQUMsWUFBb0IsRUFBRSxJQUFvQztRQUNsRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDakYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxZQUFvQixFQUFFLElBQWtDO1FBQzlFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUMvRSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELHFCQUFxQixDQUFDLFlBQW9CLEVBQUUsSUFBZ0M7UUFDMUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQzdFLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsc0JBQXNCLENBQUMsWUFBb0IsRUFBRSxJQUFpQztRQUM1RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDOUUsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0IsQ0FDZCxZQUFvQixFQUNwQixJQUEyQixFQUMzQixPQUFpQztRQUVqQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2pGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsbUJBQW1CLENBQ2pCLFlBQW9CLEVBQ3BCLElBQThCLEVBQzlCLE9BQW9DO1FBRXBDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDcEYsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxZQUFvQixFQUFFLElBQTRCO1FBQ2xFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUN6RSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUFDLFlBQW9CLEVBQUUsSUFBNkI7UUFDcEUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQzFFLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQscUJBQXFCLENBQUMsWUFBb0IsRUFBRSxJQUFnQztRQUMxRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDN0UsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxrQkFBa0IsQ0FDaEIsWUFBb0IsRUFDcEIsSUFBNkIsRUFDN0IsT0FBbUM7UUFFbkMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNuRixLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELG9CQUFvQixDQUNsQixZQUFvQixFQUNwQixJQUErQixFQUMvQixPQUFxQztRQUVyQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3JGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsOEJBQThCLENBQzVCLFlBQW9CLEVBQ3BCLElBQXlDLEVBQ3pDLE9BQStDO1FBRS9DLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDL0YsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCwyQkFBMkIsQ0FDekIsWUFBb0IsRUFDcEIsSUFBc0M7UUFFdEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ25GLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsMEJBQTBCLENBQUMsT0FBMEM7UUFDbkUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDdkUsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxZQUFvQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUNyRSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQVlELFlBQVksQ0FBQyxPQUFPO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUN6RCxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGFBQWEsQ0FBQyxZQUFvQjtRQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDL0QsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQUMsT0FBOEI7UUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBWUQsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDaEUsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFJRCxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0RCxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUEyQjtRQUN4QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDMUQsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQUMsWUFBb0I7UUFDakMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQ2hFLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsbUNBQW1DLENBQ2pDLE9BQW1EO1FBRW5ELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQ0FBbUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ2hGLEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsdUJBQXVCLENBQUMsT0FBdUM7UUFDN0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDcEUsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxPQUFpQztRQUN2RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNwRSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQW9DO1FBQ3JELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQy9ELEtBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBc0M7UUFDekQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFDakUsS0FBSyxFQUFFLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUFDLFlBQW9CLEVBQUUsT0FBUSxFQUFFLElBQUs7UUFDckQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUUsTUFBYyxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUMzRixLQUFLLEVBQUUsQ0FDMkIsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxvQkFBb0IsQ0FBQyxZQUFvQixFQUFFLE9BQVEsRUFBRSxJQUFLO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFFLE1BQWMsQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDOUYsS0FBSyxFQUFFLENBQzJCLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZSxDQUFDLFlBQW9CLEVBQUUsT0FBUSxFQUFFLElBQUs7UUFDbkQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUUsTUFBYyxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDekYsS0FBSyxFQUFFLENBQ3lCLENBQUM7SUFDckMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsa0JBQWtCLENBQUMsWUFBb0IsRUFBRSxPQUFRLEVBQUUsSUFBSztRQUN0RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBRSxNQUFjLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQzVGLEtBQUssRUFBRSxDQUN5QixDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNILGdCQUFnQixDQUFDLFlBQW9CLEVBQUUsT0FBUSxFQUFFLElBQUs7UUFDcEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUUsTUFBYyxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUMxRixLQUFLLEVBQUUsQ0FDeUIsQ0FBQztJQUNyQyxDQUFDO0lBRU8sbUJBQW1CLENBQUMsT0FBZTtRQUN6QyxPQUFPO1lBQ0wsSUFBSSxFQUFFLFlBQVk7WUFDbEIsR0FBRyxFQUFFLHdCQUF3QjtZQUM3QixVQUFVLEVBQUUsMkJBQTJCO1lBQ3ZDLE9BQU87U0FDUixDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0LCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgQ29uZmlybUFjc3NEZWJpdFBheW1lbnREYXRhLFxuICBDb25maXJtQWNzc0RlYml0UGF5bWVudE9wdGlvbnMsXG4gIENvbmZpcm1BZnRlcnBheUNsZWFycGF5UGF5bWVudERhdGEsXG4gIENvbmZpcm1BZnRlcnBheUNsZWFycGF5UGF5bWVudE9wdGlvbnMsXG4gIENvbmZpcm1BbGlwYXlQYXltZW50RGF0YSxcbiAgQ29uZmlybUFsaXBheVBheW1lbnRPcHRpb25zLFxuICBDb25maXJtQXVCZWNzRGViaXRQYXltZW50RGF0YSxcbiAgQ29uZmlybUF1QmVjc0RlYml0U2V0dXBEYXRhLFxuICBDb25maXJtQmFuY29udGFjdFBheW1lbnREYXRhLFxuICBDb25maXJtQmFuY29udGFjdFBheW1lbnRPcHRpb25zLFxuICBDb25maXJtQm9sZXRvUGF5bWVudERhdGEsXG4gIENvbmZpcm1Cb2xldG9QYXltZW50T3B0aW9ucyxcbiAgQ29uZmlybUNhcmRQYXltZW50RGF0YSxcbiAgQ29uZmlybUNhcmRQYXltZW50T3B0aW9ucyxcbiAgQ29uZmlybUVwc1BheW1lbnREYXRhLFxuICBDb25maXJtRXBzUGF5bWVudE9wdGlvbnMsXG4gIENvbmZpcm1GcHhQYXltZW50RGF0YSxcbiAgQ29uZmlybUZweFBheW1lbnRPcHRpb25zLFxuICBDb25maXJtR2lyb3BheVBheW1lbnREYXRhLFxuICBDb25maXJtR2lyb3BheVBheW1lbnRPcHRpb25zLFxuICBDb25maXJtR3JhYlBheVBheW1lbnREYXRhLFxuICBDb25maXJtR3JhYlBheVBheW1lbnRPcHRpb25zLFxuICBDb25maXJtSWRlYWxQYXltZW50RGF0YSxcbiAgQ29uZmlybUlkZWFsUGF5bWVudE9wdGlvbnMsXG4gIENvbmZpcm1LbGFybmFQYXltZW50RGF0YSxcbiAgQ29uZmlybUtsYXJuYVBheW1lbnRPcHRpb25zLFxuICBDb25maXJtT3h4b1BheW1lbnREYXRhLFxuICBDb25maXJtT3h4b1BheW1lbnRPcHRpb25zLFxuICBDb25maXJtUDI0UGF5bWVudERhdGEsXG4gIENvbmZpcm1QMjRQYXltZW50T3B0aW9ucyxcbiAgQ29uZmlybUNhcmRTZXR1cERhdGEsXG4gIENvbmZpcm1DYXJkU2V0dXBPcHRpb25zLFxuICBDb25maXJtU2VwYURlYml0UGF5bWVudERhdGEsXG4gIENvbmZpcm1Tb2ZvcnRQYXltZW50RGF0YSxcbiAgQ29uZmlybVdlY2hhdFBheVBheW1lbnREYXRhLFxuICBDb25maXJtV2VjaGF0UGF5UGF5bWVudE9wdGlvbnMsXG4gIENvbmZpcm1TZXBhRGViaXRTZXR1cERhdGEsXG4gIENyZWF0ZVBheW1lbnRNZXRob2REYXRhLFxuICBWZXJpZnlNaWNyb2RlcG9zaXRzRm9yUGF5bWVudERhdGEsXG4gIENvbmZpcm1BY3NzRGViaXRTZXR1cERhdGEsXG4gIENvbmZpcm1BY3NzRGViaXRTZXR1cE9wdGlvbnMsXG4gIENyZWF0ZVNvdXJjZURhdGEsXG4gIENyZWF0ZVRva2VuSWJhbkRhdGEsXG4gIENyZWF0ZVRva2VuQ2FyZERhdGEsXG4gIENyZWF0ZVRva2VuUGlpRGF0YSxcbiAgQ3JlYXRlVG9rZW5CYW5rQWNjb3VudERhdGEsXG4gIFBheW1lbnRSZXF1ZXN0LFxuICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gIFJlZGlyZWN0VG9DaGVja291dE9wdGlvbnMsXG4gIFJldHJpZXZlU291cmNlUGFyYW0sXG4gIFN0cmlwZSxcbiAgU3RyaXBlQ2FyZEVsZW1lbnQsXG4gIFN0cmlwZUNhcmROdW1iZXJFbGVtZW50LFxuICBTdHJpcGVDYXJkQ3ZjRWxlbWVudCxcbiAgU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zLFxuICBTdHJpcGVFbGVtZW50cyxcbiAgU3RyaXBlRWxlbWVudCxcbiAgU3RyaXBlRXJyb3IsXG4gIFN0cmlwZUliYW5FbGVtZW50LFxuICBUb2tlbkNyZWF0ZVBhcmFtcyxcbiAgQ29uZmlybUJhY3NEZWJpdFNldHVwRGF0YSxcbiAgQ29uZmlybUJhbmNvbnRhY3RTZXR1cERhdGEsXG4gIENvbmZpcm1JZGVhbFNldHVwRGF0YSxcbiAgQ29uZmlybVNvZm9ydFNldHVwRGF0YSxcbiAgVmVyaWZ5TWljcm9kZXBvc2l0c0ZvclNldHVwRGF0YSxcbiAgV3JhcHBlckxpYnJhcnksXG4gIFZlcmlmaWNhdGlvblNlc3Npb25SZXN1bHQsXG4gIENvbmZpcm1QYXlQYWxQYXltZW50RGF0YSxcbiAgQ29uZmlybVBheVBhbFNldHVwRGF0YSxcbiAgQ29uZmlybVBheW1lbnREYXRhLFxuICBDb25maXJtQ3VzdG9tZXJCYWxhbmNlUGF5bWVudERhdGEsXG4gIENvbmZpcm1DdXN0b21lckJhbGFuY2VQYXltZW50T3B0aW9ucyxcbiAgQ29uZmlybVBheU5vd1BheW1lbnREYXRhLFxuICBDb25maXJtUGF5Tm93UGF5bWVudE9wdGlvbnMsXG4gIENvbmZpcm1Qcm9tcHRQYXlQYXltZW50RGF0YSxcbiAgQ29uZmlybVByb21wdFBheVBheW1lbnRPcHRpb25zLFxuICBDb25maXJtQWZmaXJtUGF5bWVudERhdGEsXG4gIENvbmZpcm1BZmZpcm1QYXltZW50T3B0aW9ucyxcbiAgQ29uZmlybVNvZm9ydFBheW1lbnRPcHRpb25zLFxuICBDb25maXJtU29mb3J0U2V0dXBPcHRpb25zLFxuICBDb25maXJtS29uYmluaVBheW1lbnREYXRhLFxuICBDb25maXJtS29uYmluaVBheW1lbnRPcHRpb25zLFxuICBDb25maXJtVXNCYW5rQWNjb3VudFBheW1lbnREYXRhLFxuICBDb2xsZWN0QmFua0FjY291bnRGb3JQYXltZW50T3B0aW9ucyxcbiAgQ29uZmlybVVzQmFua0FjY291bnRTZXR1cERhdGEsXG4gIENvbGxlY3RCYW5rQWNjb3VudEZvclNldHVwT3B0aW9ucyxcbiAgUGF5bWVudEludGVudFJlc3VsdCxcbiAgUGF5bWVudE1ldGhvZFJlc3VsdCxcbiAgU2V0dXBJbnRlbnRSZXN1bHQsXG4gIFRva2VuUmVzdWx0LFxuICBTb3VyY2VSZXN1bHQsXG4gIENvbmZpcm1QaXhQYXltZW50RGF0YSxcbiAgQ29uZmlybVBpeFBheW1lbnRPcHRpb25zLFxuICBSYWRhclNlc3Npb25QYXlsb2FkLFxuICBQcm9jZXNzT3JkZXJSZXN1bHQsXG4gIFJldHJpZXZlT3JkZXJSZXN1bHQsXG4gIEZpbmFuY2lhbENvbm5lY3Rpb25zU2Vzc2lvblJlc3VsdCxcbiAgQ29sbGVjdEJhbmtBY2NvdW50VG9rZW5SZXN1bHQsXG4gIEVwaGVtZXJhbEtleU5vbmNlUmVzdWx0LFxuICBQcm9jZXNzT3JkZXJQYXJhbXMsXG4gIENvbGxlY3RGaW5hbmNpYWxDb25uZWN0aW9uc0FjY291bnRzT3B0aW9ucyxcbiAgQ29sbGVjdEJhbmtBY2NvdW50VG9rZW5PcHRpb25zLFxuICBFcGhlbWVyYWxLZXlOb25jZU9wdGlvbnMsXG4gIFN0cmlwZUVsZW1lbnRzT3B0aW9uc0NsaWVudFNlY3JldCxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zTW9kZSxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zLFxuICBDb25maXJtQmxpa1BheW1lbnREYXRhLFxuICBDb25maXJtQmxpa1BheW1lbnRPcHRpb25zLFxuICBDb25maXJtQ2FzaGFwcFBheW1lbnREYXRhLFxuICBDb25maXJtQ2FzaGFwcFBheW1lbnRPcHRpb25zLFxuICBQYXltZW50SW50ZW50T3JTZXR1cEludGVudFJlc3VsdCxcbiAgQ3JlYXRlUGF5bWVudE1ldGhvZEZyb21FbGVtZW50cyxcbiAgQ3JlYXRlUGF5bWVudE1ldGhvZEZyb21FbGVtZW50LFxuICBDb25maXJtQ2FzaGFwcFNldHVwRGF0YSxcbiAgQ29uZmlybUNhc2hhcHBTZXR1cE9wdGlvbnMsXG4gIFN0cmlwZUN1c3RvbUNoZWNrb3V0T3B0aW9ucyxcbiAgU3RyaXBlQ3VzdG9tQ2hlY2tvdXQsXG4gIFN0cmlwZUVtYmVkZGVkQ2hlY2tvdXRPcHRpb25zLFxuICBTdHJpcGVFbWJlZGRlZENoZWNrb3V0LFxuICBDb25maXJtTW9iaWxlcGF5UGF5bWVudERhdGEsXG4gIENvbmZpcm1Nb2JpbGVwYXlQYXltZW50T3B0aW9ucyxcbiAgQ3JlYXRlQ29uZmlybWF0aW9uVG9rZW4sXG4gIENvbmZpcm1hdGlvblRva2VuUmVzdWx0LFxuICBDb25maXJtU2V0dXBEYXRhXG59IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuaW1wb3J0IHsgU3RyaXBlU2VydmljZUludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvc3RyaXBlLWluc3RhbmNlLmludGVyZmFjZSc7XG5cbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJy4vd2luZG93LXJlZi5zZXJ2aWNlJztcbmltcG9ydCB7IExhenlTdHJpcGVBUElMb2FkZXIsIExhenlTdHJpcGVBUElMb2FkZXJTdGF0dXMgfSBmcm9tICcuL2FwaS1sb2FkZXIuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBTdHJpcGVJbnN0YW5jZSBpbXBsZW1lbnRzIFN0cmlwZVNlcnZpY2VJbnRlcmZhY2Uge1xuICBwcml2YXRlIHN0cmlwZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFN0cmlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgc3RyaXBlID0gdGhpcy5zdHJpcGUkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoZmlsdGVyKChzdHJpcGUpID0+IEJvb2xlYW4oc3RyaXBlKSkpIGFzIE9ic2VydmFibGU8U3RyaXBlPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZlcnNpb246IHN0cmluZyxcbiAgICBwcml2YXRlIGxvYWRlcjogTGF6eVN0cmlwZUFQSUxvYWRlcixcbiAgICBwcml2YXRlIHdpbmRvdzogV2luZG93UmVmLFxuICAgIHByaXZhdGUga2V5OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBvcHRpb25zPzogU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zXG4gICkge1xuICAgIHRoaXMubG9hZGVyXG4gICAgICAuYXNTdHJlYW0oKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigoc3RhdHVzOiBMYXp5U3RyaXBlQVBJTG9hZGVyU3RhdHVzKSA9PiBzdGF0dXMubG9hZGVkID09PSB0cnVlKSxcbiAgICAgICAgZmlyc3QoKSxcbiAgICAgICAgbWFwKCgpID0+ICh0aGlzLndpbmRvdy5nZXROYXRpdmVXaW5kb3coKSBhcyBhbnkpLlN0cmlwZSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKHN0cmlwZUluc3RhbmNlOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3Qgc3RyaXBlID0gdGhpcy5vcHRpb25zXG4gICAgICAgICAgPyAoc3RyaXBlSW5zdGFuY2UodGhpcy5rZXksIHRoaXMub3B0aW9ucykgYXMgU3RyaXBlKVxuICAgICAgICAgIDogKHN0cmlwZUluc3RhbmNlKHRoaXMua2V5KSBhcyBTdHJpcGUpO1xuXG4gICAgICAgIHN0cmlwZS5yZWdpc3RlckFwcEluZm8odGhpcy5nZXROZ3hTdHJpcGVBcHBJbmZvKHRoaXMudmVyc2lvbikpO1xuICAgICAgICB0aGlzLnN0cmlwZSQubmV4dChzdHJpcGUpO1xuICAgICAgfSk7XG4gIH1cblxuICBnZXRJbnN0YW5jZSgpOiBTdHJpcGUge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZSQuZ2V0VmFsdWUoKSBhcyBTdHJpcGU7XG4gIH1cblxuICBlbGVtZW50cyhvcHRpb25zPzogU3RyaXBlRWxlbWVudHNPcHRpb25zQ2xpZW50U2VjcmV0KTogT2JzZXJ2YWJsZTxTdHJpcGVFbGVtZW50cz47XG4gIGVsZW1lbnRzKG9wdGlvbnM/OiBTdHJpcGVFbGVtZW50c09wdGlvbnNNb2RlKTogT2JzZXJ2YWJsZTxTdHJpcGVFbGVtZW50cz47XG4gIGVsZW1lbnRzKG9wdGlvbnM/OiBTdHJpcGVFbGVtZW50c09wdGlvbnMpOiBPYnNlcnZhYmxlPFN0cmlwZUVsZW1lbnRzPjtcbiAgZWxlbWVudHMob3B0aW9ucz8pOiBPYnNlcnZhYmxlPFN0cmlwZUVsZW1lbnRzPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBtYXAoKHN0cmlwZTogU3RyaXBlKSA9PiBzdHJpcGUuZWxlbWVudHMob3B0aW9ucykpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICByZWRpcmVjdFRvQ2hlY2tvdXQob3B0aW9uczogUmVkaXJlY3RUb0NoZWNrb3V0T3B0aW9ucyk6IE9ic2VydmFibGU8bmV2ZXIgfCB7IGVycm9yOiBTdHJpcGVFcnJvciB9PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUucmVkaXJlY3RUb0NoZWNrb3V0KG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1QYXltZW50KG9wdGlvbnM6IHtcbiAgICBlbGVtZW50czogU3RyaXBlRWxlbWVudHM7XG4gICAgY29uZmlybVBhcmFtcz86IFBhcnRpYWw8Q29uZmlybVBheW1lbnREYXRhPjtcbiAgICByZWRpcmVjdDogJ2lmX3JlcXVpcmVkJztcbiAgfSk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD47XG4gIGNvbmZpcm1QYXltZW50KG9wdGlvbnM6IHtcbiAgICBlbGVtZW50cz86IFN0cmlwZUVsZW1lbnRzO1xuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xuICAgIGNvbmZpcm1QYXJhbXM/OiBQYXJ0aWFsPENvbmZpcm1QYXltZW50RGF0YT47XG4gICAgcmVkaXJlY3Q6ICdpZl9yZXF1aXJlZCc7XG4gIH0pOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+O1xuICBjb25maXJtUGF5bWVudChvcHRpb25zOiB7XG4gICAgZWxlbWVudHM6IFN0cmlwZUVsZW1lbnRzO1xuICAgIGNvbmZpcm1QYXJhbXM6IENvbmZpcm1QYXltZW50RGF0YTtcbiAgICByZWRpcmVjdD86ICdhbHdheXMnO1xuICB9KTogT2JzZXJ2YWJsZTxuZXZlciB8IHsgZXJyb3I6IFN0cmlwZUVycm9yIH0+O1xuICBjb25maXJtUGF5bWVudChvcHRpb25zOiB7XG4gICAgZWxlbWVudHM/OiBTdHJpcGVFbGVtZW50cztcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgICBjb25maXJtUGFyYW1zOiBDb25maXJtUGF5bWVudERhdGE7XG4gICAgcmVkaXJlY3Q/OiAnYWx3YXlzJztcbiAgfSk6IE9ic2VydmFibGU8bmV2ZXIgfCB7IGVycm9yOiBTdHJpcGVFcnJvciB9PjtcbiAgY29uZmlybVBheW1lbnQob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1QYXltZW50KG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1BY3NzRGViaXRQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQWNzc0RlYml0UGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1BY3NzRGViaXRQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtQWNzc0RlYml0UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1Vc0JhbmtBY2NvdW50UGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybVVzQmFua0FjY291bnRQYXltZW50RGF0YVxuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtVXNCYW5rQWNjb3VudFBheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQWxpcGF5UGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUFsaXBheVBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtQWxpcGF5UGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUFsaXBheVBheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQXVCZWNzRGViaXRQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQXVCZWNzRGViaXRQYXltZW50RGF0YVxuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtQXVCZWNzRGViaXRQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybUJhbmNvbnRhY3RQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQmFuY29udGFjdFBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtQmFuY29udGFjdFBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1CYW5jb250YWN0UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1CbGlrUGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUJsaWtQYXltZW50RGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybUJsaWtQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtQmxpa1BheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQm9sZXRvUGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUJvbGV0b1BheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtQm9sZXRvUGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUJvbGV0b1BheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQ2FyZFBheW1lbnQoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1DYXJkUGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1DYXJkUGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUNhcmRQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybUNhc2hhcHBQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQ2FzaGFwcFBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtQ2FzaGFwcFBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1DYXNoYXBwUGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1DdXN0b21lckJhbGFuY2VQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE6IENvbmZpcm1DdXN0b21lckJhbGFuY2VQYXltZW50RGF0YSxcbiAgICBvcHRpb25zOiBDb25maXJtQ3VzdG9tZXJCYWxhbmNlUGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUN1c3RvbWVyQmFsYW5jZVBheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtRXBzUGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUVwc1BheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtRXBzUGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUVwc1BheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtRnB4UGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUZweFBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtRnB4UGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUZweFBheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtR2lyb3BheVBheW1lbnQoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1HaXJvcGF5UGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1HaXJvcGF5UGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUdpcm9wYXlQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybUdyYWJQYXlQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtR3JhYlBheVBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtR3JhYlBheVBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1HcmFiUGF5UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1JZGVhbFBheW1lbnQoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1JZGVhbFBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtSWRlYWxQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtSWRlYWxQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybUtsYXJuYVBheW1lbnQoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1LbGFybmFQYXltZW50RGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybUtsYXJuYVBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1LbGFybmFQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybUtvbmJpbmlQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtS29uYmluaVBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtS29uYmluaVBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1Lb25iaW5pUGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1Nb2JpbGVwYXlQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtTW9iaWxlcGF5UGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1Nb2JpbGVwYXlQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtTW9iaWxlcGF5UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1PeHhvUGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybU94eG9QYXltZW50RGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybU94eG9QYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtT3h4b1BheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtUDI0UGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybVAyNFBheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtUDI0UGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybVAyNFBheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtUGF5Tm93UGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybVBheU5vd1BheW1lbnREYXRhLFxuICAgIG9wdGlvbnM/OiBDb25maXJtUGF5Tm93UGF5bWVudE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybVBheU5vd1BheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtUGF5UGFsUGF5bWVudChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1QYXlQYWxQYXltZW50RGF0YSk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1QYXlQYWxQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybVBpeFBheW1lbnQoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1QaXhQYXltZW50RGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybVBpeFBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1QaXhQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybVByb21wdFBheVBheW1lbnQoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1Qcm9tcHRQYXlQYXltZW50RGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybVByb21wdFBheVBheW1lbnRPcHRpb25zXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1Qcm9tcHRQYXlQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybVNlcGFEZWJpdFBheW1lbnQoY2xpZW50U2VjcmV0OiBzdHJpbmcsIGRhdGE/OiBDb25maXJtU2VwYURlYml0UGF5bWVudERhdGEpOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtU2VwYURlYml0UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1Tb2ZvcnRQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtU29mb3J0UGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1Tb2ZvcnRQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtU29mb3J0UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1XZWNoYXRQYXlQYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtV2VjaGF0UGF5UGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1XZWNoYXRQYXlQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtV2VjaGF0UGF5UGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUNhcmRBY3Rpb24oY2xpZW50U2VjcmV0OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5oYW5kbGVDYXJkQWN0aW9uKGNsaWVudFNlY3JldCkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgaGFuZGxlTmV4dEFjdGlvbihvcHRpb25zOiB7IGNsaWVudFNlY3JldDogc3RyaW5nIH0pOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRPclNldHVwSW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuaGFuZGxlTmV4dEFjdGlvbihvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICB2ZXJpZnlNaWNyb2RlcG9zaXRzRm9yUGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogVmVyaWZ5TWljcm9kZXBvc2l0c0ZvclBheW1lbnREYXRhXG4gICk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLnZlcmlmeU1pY3JvZGVwb3NpdHNGb3JQYXltZW50KGNsaWVudFNlY3JldCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlUmFkYXJTZXNzaW9uKCk6IE9ic2VydmFibGU8UmFkYXJTZXNzaW9uUGF5bG9hZD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNyZWF0ZVJhZGFyU2Vzc2lvbigpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbGxlY3RCYW5rQWNjb3VudEZvclBheW1lbnQob3B0aW9uczogQ29sbGVjdEJhbmtBY2NvdW50Rm9yUGF5bWVudE9wdGlvbnMpOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb2xsZWN0QmFua0FjY291bnRGb3JQYXltZW50KG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZVBheW1lbnRNZXRob2QocGF5bWVudE1ldGhvZERhdGE6IENyZWF0ZVBheW1lbnRNZXRob2REYXRhKTogT2JzZXJ2YWJsZTxQYXltZW50TWV0aG9kUmVzdWx0PjtcbiAgY3JlYXRlUGF5bWVudE1ldGhvZChvcHRpb25zOiBDcmVhdGVQYXltZW50TWV0aG9kRnJvbUVsZW1lbnRzKTogT2JzZXJ2YWJsZTxQYXltZW50TWV0aG9kUmVzdWx0PjtcbiAgY3JlYXRlUGF5bWVudE1ldGhvZChvcHRpb25zOiBDcmVhdGVQYXltZW50TWV0aG9kRnJvbUVsZW1lbnQpOiBPYnNlcnZhYmxlPFBheW1lbnRNZXRob2RSZXN1bHQ+O1xuICBjcmVhdGVQYXltZW50TWV0aG9kKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jcmVhdGVQYXltZW50TWV0aG9kKG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbmZpcm1hdGlvblRva2VuKG9wdGlvbnM6IENyZWF0ZUNvbmZpcm1hdGlvblRva2VuKTogT2JzZXJ2YWJsZTxDb25maXJtYXRpb25Ub2tlblJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNyZWF0ZUNvbmZpcm1hdGlvblRva2VuKG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIHJldHJpZXZlUGF5bWVudEludGVudChjbGllbnRTZWNyZXQ6IHN0cmluZyk6IE9ic2VydmFibGU8UGF5bWVudEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLnJldHJpZXZlUGF5bWVudEludGVudChjbGllbnRTZWNyZXQpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1TZXR1cChvcHRpb25zOiB7XG4gICAgZWxlbWVudHM6IFN0cmlwZUVsZW1lbnRzO1xuICAgIGNvbmZpcm1QYXJhbXM/OiBQYXJ0aWFsPENvbmZpcm1TZXR1cERhdGE+O1xuICAgIHJlZGlyZWN0OiAnaWZfcmVxdWlyZWQnO1xuICB9KTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD47XG4gIGNvbmZpcm1TZXR1cChvcHRpb25zOiB7XG4gICAgZWxlbWVudHM/OiBTdHJpcGVFbGVtZW50cztcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgICBjb25maXJtUGFyYW1zPzogUGFydGlhbDxDb25maXJtU2V0dXBEYXRhPjtcbiAgICByZWRpcmVjdDogJ2lmX3JlcXVpcmVkJztcbiAgfSk6IE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+O1xuICBjb25maXJtU2V0dXAob3B0aW9uczoge1xuICAgIGVsZW1lbnRzOiBTdHJpcGVFbGVtZW50cztcbiAgICBjb25maXJtUGFyYW1zOiBDb25maXJtU2V0dXBEYXRhO1xuICAgIHJlZGlyZWN0PzogJ2Fsd2F5cyc7XG4gIH0pOiBPYnNlcnZhYmxlPG5ldmVyIHwgeyBlcnJvcjogU3RyaXBlRXJyb3IgfT47XG4gIGNvbmZpcm1TZXR1cChvcHRpb25zOiB7XG4gICAgZWxlbWVudHM/OiBTdHJpcGVFbGVtZW50cztcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgICBjb25maXJtUGFyYW1zOiBDb25maXJtU2V0dXBEYXRhO1xuICAgIHJlZGlyZWN0PzogJ2Fsd2F5cyc7XG4gIH0pOiBPYnNlcnZhYmxlPG5ldmVyIHwgeyBlcnJvcjogU3RyaXBlRXJyb3IgfT47XG4gIGNvbmZpcm1TZXR1cChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybVNldHVwKG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1BY3NzRGViaXRTZXR1cChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUFjc3NEZWJpdFNldHVwRGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybUFjc3NEZWJpdFNldHVwT3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFNldHVwSW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUFjc3NEZWJpdFNldHVwKGNsaWVudFNlY3JldCwgZGF0YSwgb3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybVVzQmFua0FjY291bnRTZXR1cChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1Vc0JhbmtBY2NvdW50U2V0dXBEYXRhKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1Vc0JhbmtBY2NvdW50U2V0dXAoY2xpZW50U2VjcmV0LCBkYXRhKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQXVCZWNzRGViaXRTZXR1cChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1BdUJlY3NEZWJpdFNldHVwRGF0YSk6IE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtQXVCZWNzRGViaXRTZXR1cChjbGllbnRTZWNyZXQsIGRhdGEpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1CYWNzRGViaXRTZXR1cChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1CYWNzRGViaXRTZXR1cERhdGEpOiBPYnNlcnZhYmxlPFNldHVwSW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybUJhY3NEZWJpdFNldHVwKGNsaWVudFNlY3JldCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybUJhbmNvbnRhY3RTZXR1cChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1CYW5jb250YWN0U2V0dXBEYXRhKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1CYW5jb250YWN0U2V0dXAoY2xpZW50U2VjcmV0LCBkYXRhKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQ2FyZFNldHVwKFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQ2FyZFNldHVwRGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybUNhcmRTZXR1cE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1DYXJkU2V0dXAoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtQ2FzaGFwcFNldHVwKFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQ2FzaGFwcFNldHVwRGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybUNhc2hhcHBTZXR1cE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1DYXNoYXBwU2V0dXAoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtSWRlYWxTZXR1cChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1JZGVhbFNldHVwRGF0YSk6IE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtSWRlYWxTZXR1cChjbGllbnRTZWNyZXQsIGRhdGEpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1QYXlQYWxTZXR1cChjbGllbnRTZWNyZXQ6IHN0cmluZywgZGF0YT86IENvbmZpcm1QYXlQYWxTZXR1cERhdGEpOiBPYnNlcnZhYmxlPFNldHVwSW50ZW50UmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY29uZmlybVBheVBhbFNldHVwKGNsaWVudFNlY3JldCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY29uZmlybVNlcGFEZWJpdFNldHVwKGNsaWVudFNlY3JldDogc3RyaW5nLCBkYXRhPzogQ29uZmlybVNlcGFEZWJpdFNldHVwRGF0YSk6IE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtU2VwYURlYml0U2V0dXAoY2xpZW50U2VjcmV0LCBkYXRhKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjb25maXJtU29mb3J0U2V0dXAoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IENvbmZpcm1Tb2ZvcnRTZXR1cERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1Tb2ZvcnRTZXR1cE9wdGlvbnNcbiAgKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbmZpcm1Tb2ZvcnRTZXR1cChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1BZmZpcm1QYXltZW50KFxuICAgIGNsaWVudFNlY3JldDogc3RyaW5nLFxuICAgIGRhdGE/OiBDb25maXJtQWZmaXJtUGF5bWVudERhdGEsXG4gICAgb3B0aW9ucz86IENvbmZpcm1BZmZpcm1QYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtQWZmaXJtUGF5bWVudChjbGllbnRTZWNyZXQsIGRhdGEsIG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpcm1BZnRlcnBheUNsZWFycGF5UGF5bWVudChcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZyxcbiAgICBkYXRhPzogQ29uZmlybUFmdGVycGF5Q2xlYXJwYXlQYXltZW50RGF0YSxcbiAgICBvcHRpb25zPzogQ29uZmlybUFmdGVycGF5Q2xlYXJwYXlQYXltZW50T3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb25maXJtQWZ0ZXJwYXlDbGVhcnBheVBheW1lbnQoY2xpZW50U2VjcmV0LCBkYXRhLCBvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICB2ZXJpZnlNaWNyb2RlcG9zaXRzRm9yU2V0dXAoXG4gICAgY2xpZW50U2VjcmV0OiBzdHJpbmcsXG4gICAgZGF0YT86IFZlcmlmeU1pY3JvZGVwb3NpdHNGb3JTZXR1cERhdGFcbiAgKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLnZlcmlmeU1pY3JvZGVwb3NpdHNGb3JTZXR1cChjbGllbnRTZWNyZXQsIGRhdGEpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbGxlY3RCYW5rQWNjb3VudEZvclNldHVwKG9wdGlvbnM6IENvbGxlY3RCYW5rQWNjb3VudEZvclNldHVwT3B0aW9ucyk6IE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb2xsZWN0QmFua0FjY291bnRGb3JTZXR1cChvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICByZXRyaWV2ZVNldHVwSW50ZW50KGNsaWVudFNlY3JldDogc3RyaW5nKTogT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLnJldHJpZXZlU2V0dXBJbnRlbnQoY2xpZW50U2VjcmV0KSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBwcm9jZXNzT3JkZXIob3B0aW9uczoge1xuICAgIGVsZW1lbnRzOiBTdHJpcGVFbGVtZW50cztcbiAgICBjb25maXJtUGFyYW1zPzogUGFydGlhbDxQcm9jZXNzT3JkZXJQYXJhbXM+O1xuICAgIHJlZGlyZWN0OiAnaWZfcmVxdWlyZWQnO1xuICB9KTogT2JzZXJ2YWJsZTxQcm9jZXNzT3JkZXJSZXN1bHQ+O1xuICBwcm9jZXNzT3JkZXIob3B0aW9uczoge1xuICAgIGVsZW1lbnRzOiBTdHJpcGVFbGVtZW50cztcbiAgICBjb25maXJtUGFyYW1zOiBQcm9jZXNzT3JkZXJQYXJhbXM7XG4gICAgcmVkaXJlY3Q/OiAnYWx3YXlzJztcbiAgfSk6IE9ic2VydmFibGU8bmV2ZXIgfCB7IGVycm9yOiBTdHJpcGVFcnJvciB9PjtcbiAgcHJvY2Vzc09yZGVyKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5wcm9jZXNzT3JkZXIob3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgcmV0cmlldmVPcmRlcihjbGllbnRTZWNyZXQ6IHN0cmluZyk6IE9ic2VydmFibGU8UmV0cmlldmVPcmRlclJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLnJldHJpZXZlT3JkZXIoY2xpZW50U2VjcmV0KSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBwYXltZW50UmVxdWVzdChvcHRpb25zOiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQYXltZW50UmVxdWVzdCB7XG4gICAgY29uc3Qgc3RyaXBlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xuICAgIHJldHVybiBzdHJpcGUucGF5bWVudFJlcXVlc3Qob3B0aW9ucyk7XG4gIH1cblxuICBjcmVhdGVUb2tlbih0b2tlblR5cGU6IFN0cmlwZUliYW5FbGVtZW50LCBkYXRhOiBDcmVhdGVUb2tlbkliYW5EYXRhKTogT2JzZXJ2YWJsZTxUb2tlblJlc3VsdD47XG4gIGNyZWF0ZVRva2VuKFxuICAgIHRva2VuVHlwZTogU3RyaXBlQ2FyZEVsZW1lbnQgfCBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudCxcbiAgICBkYXRhPzogQ3JlYXRlVG9rZW5DYXJkRGF0YVxuICApOiBPYnNlcnZhYmxlPFRva2VuUmVzdWx0PjtcbiAgY3JlYXRlVG9rZW4odG9rZW5UeXBlOiAncGlpJywgZGF0YTogQ3JlYXRlVG9rZW5QaWlEYXRhKTogT2JzZXJ2YWJsZTxUb2tlblJlc3VsdD47XG4gIGNyZWF0ZVRva2VuKHRva2VuVHlwZTogJ2JhbmtfYWNjb3VudCcsIGRhdGE6IENyZWF0ZVRva2VuQmFua0FjY291bnREYXRhKTogT2JzZXJ2YWJsZTxUb2tlblJlc3VsdD47XG4gIGNyZWF0ZVRva2VuKHRva2VuVHlwZTogJ2N2Y191cGRhdGUnLCBlbGVtZW50PzogU3RyaXBlQ2FyZEN2Y0VsZW1lbnQpOiBPYnNlcnZhYmxlPFRva2VuUmVzdWx0PjtcbiAgY3JlYXRlVG9rZW4odG9rZW5UeXBlOiAnYWNjb3VudCcsIGRhdGE6IFRva2VuQ3JlYXRlUGFyYW1zLkFjY291bnQpOiBPYnNlcnZhYmxlPFRva2VuUmVzdWx0PjtcbiAgY3JlYXRlVG9rZW4odG9rZW5UeXBlOiAncGVyc29uJywgZGF0YTogVG9rZW5DcmVhdGVQYXJhbXMuUGVyc29uKTogT2JzZXJ2YWJsZTxUb2tlblJlc3VsdD47XG4gIGNyZWF0ZVRva2VuKHRva2VuVHlwZSwgZGF0YSkge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNyZWF0ZVRva2VuKHRva2VuVHlwZSwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlU291cmNlKGVsZW1lbnQ6IFN0cmlwZUVsZW1lbnQsIHNvdXJjZURhdGE6IENyZWF0ZVNvdXJjZURhdGEpOiBPYnNlcnZhYmxlPFNvdXJjZVJlc3VsdD47XG4gIGNyZWF0ZVNvdXJjZShzb3VyY2VEYXRhOiBDcmVhdGVTb3VyY2VEYXRhKTogT2JzZXJ2YWJsZTxTb3VyY2VSZXN1bHQ+O1xuICBjcmVhdGVTb3VyY2UoYSwgYj8pOiBPYnNlcnZhYmxlPFNvdXJjZVJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNyZWF0ZVNvdXJjZShhLCBiKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICByZXRyaWV2ZVNvdXJjZShzb3VyY2U6IFJldHJpZXZlU291cmNlUGFyYW0pOiBPYnNlcnZhYmxlPFNvdXJjZVJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLnJldHJpZXZlU291cmNlKHNvdXJjZSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgdmVyaWZ5SWRlbnRpdHkoY2xpZW50U2VjcmV0OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFZlcmlmaWNhdGlvblNlc3Npb25SZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS52ZXJpZnlJZGVudGl0eShjbGllbnRTZWNyZXQpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbGxlY3RGaW5hbmNpYWxDb25uZWN0aW9uc0FjY291bnRzKFxuICAgIG9wdGlvbnM6IENvbGxlY3RGaW5hbmNpYWxDb25uZWN0aW9uc0FjY291bnRzT3B0aW9uc1xuICApOiBPYnNlcnZhYmxlPEZpbmFuY2lhbENvbm5lY3Rpb25zU2Vzc2lvblJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnN0cmlwZS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdHJpcGUpID0+IGZyb20oc3RyaXBlLmNvbGxlY3RGaW5hbmNpYWxDb25uZWN0aW9uc0FjY291bnRzKG9wdGlvbnMpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKTtcbiAgfVxuXG4gIGNvbGxlY3RCYW5rQWNjb3VudFRva2VuKG9wdGlvbnM6IENvbGxlY3RCYW5rQWNjb3VudFRva2VuT3B0aW9ucyk6IE9ic2VydmFibGU8Q29sbGVjdEJhbmtBY2NvdW50VG9rZW5SZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5jb2xsZWN0QmFua0FjY291bnRUb2tlbihvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICBjcmVhdGVFcGhlbWVyYWxLZXlOb25jZShvcHRpb25zOiBFcGhlbWVyYWxLZXlOb25jZU9wdGlvbnMpOiBPYnNlcnZhYmxlPEVwaGVtZXJhbEtleU5vbmNlUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbShzdHJpcGUuY3JlYXRlRXBoZW1lcmFsS2V5Tm9uY2Uob3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgaW5pdEN1c3RvbUNoZWNrb3V0KG9wdGlvbnM6IFN0cmlwZUN1c3RvbUNoZWNrb3V0T3B0aW9ucyk6IE9ic2VydmFibGU8U3RyaXBlQ3VzdG9tQ2hlY2tvdXQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5pbml0Q3VzdG9tQ2hlY2tvdXQob3B0aW9ucykpKSxcbiAgICAgIGZpcnN0KClcbiAgICApO1xuICB9XG5cbiAgaW5pdEVtYmVkZGVkQ2hlY2tvdXQob3B0aW9uczogU3RyaXBlRW1iZWRkZWRDaGVja291dE9wdGlvbnMpOiBPYnNlcnZhYmxlPFN0cmlwZUVtYmVkZGVkQ2hlY2tvdXQ+IHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKHN0cmlwZS5pbml0RW1iZWRkZWRDaGVja291dChvcHRpb25zKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGhhbmRsZUNhcmRQYXltZW50KGNsaWVudFNlY3JldDogc3RyaW5nLCBlbGVtZW50PywgZGF0YT8pIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKChzdHJpcGUgYXMgYW55KS5oYW5kbGVDYXJkUGF5bWVudChjbGllbnRTZWNyZXQsIGVsZW1lbnQsIGRhdGEpKSksXG4gICAgICBmaXJzdCgpXG4gICAgKSBhcyBPYnNlcnZhYmxlPFBheW1lbnRJbnRlbnRSZXN1bHQ+O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBjb25maXJtUGF5bWVudEludGVudChjbGllbnRTZWNyZXQ6IHN0cmluZywgZWxlbWVudD8sIGRhdGE/KSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbSgoc3RyaXBlIGFzIGFueSkuY29uZmlybVBheW1lbnRJbnRlbnQoY2xpZW50U2VjcmV0LCBlbGVtZW50LCBkYXRhKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICkgYXMgT2JzZXJ2YWJsZTxQYXltZW50SW50ZW50UmVzdWx0PjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgaGFuZGxlQ2FyZFNldHVwKGNsaWVudFNlY3JldDogc3RyaW5nLCBlbGVtZW50PywgZGF0YT8pIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKChzdHJpcGUgYXMgYW55KS5oYW5kbGVDYXJkU2V0dXAoY2xpZW50U2VjcmV0LCBlbGVtZW50LCBkYXRhKSkpLFxuICAgICAgZmlyc3QoKVxuICAgICkgYXMgT2JzZXJ2YWJsZTxTZXR1cEludGVudFJlc3VsdD47XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGNvbmZpcm1TZXR1cEludGVudChjbGllbnRTZWNyZXQ6IHN0cmluZywgZWxlbWVudD8sIGRhdGE/KSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaXBlLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHN0cmlwZSkgPT4gZnJvbSgoc3RyaXBlIGFzIGFueSkuY29uZmlybVNldHVwSW50ZW50KGNsaWVudFNlY3JldCwgZWxlbWVudCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApIGFzIE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBoYW5kbGVGcHhQYXltZW50KGNsaWVudFNlY3JldDogc3RyaW5nLCBlbGVtZW50PywgZGF0YT8pIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpcGUucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoc3RyaXBlKSA9PiBmcm9tKChzdHJpcGUgYXMgYW55KS5oYW5kbGVGcHhQYXltZW50KGNsaWVudFNlY3JldCwgZWxlbWVudCwgZGF0YSkpKSxcbiAgICAgIGZpcnN0KClcbiAgICApIGFzIE9ic2VydmFibGU8U2V0dXBJbnRlbnRSZXN1bHQ+O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXROZ3hTdHJpcGVBcHBJbmZvKHZlcnNpb246IHN0cmluZyk6IFdyYXBwZXJMaWJyYXJ5IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ25neC1zdHJpcGUnLFxuICAgICAgdXJsOiAnaHR0cHM6Ly9uZ3gtc3RyaXBlLmRldicsXG4gICAgICBwYXJ0bmVyX2lkOiAncHBfcGFydG5lcl9KUjRsMXJtdlVvUFA0VicsXG4gICAgICB2ZXJzaW9uXG4gICAgfTtcbiAgfVxufVxuIl19