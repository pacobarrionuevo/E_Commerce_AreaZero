import { Inject, Injectable } from '@angular/core';
import { NGX_STRIPE_VERSION, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/ngx-stripe.interface';
import { StripeInstance } from './stripe-instance.class';
import * as i0 from "@angular/core";
import * as i1 from "./api-loader.service";
import * as i2 from "./window-ref.service";
export class StripeFactoryService {
    version;
    baseKey;
    baseOptions;
    loader;
    window;
    constructor(version, baseKey, baseOptions, loader, window) {
        this.version = version;
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    create(key, options) {
        if (!key && !this.baseKey) {
            throw new Error('No key defined! Either you need to pass it as a parameter or define it when you call NgxStripeModule.forRoot()');
        }
        return new StripeInstance(this.version, this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripeFactoryService, deps: [{ token: NGX_STRIPE_VERSION }, { token: STRIPE_PUBLISHABLE_KEY }, { token: STRIPE_OPTIONS }, { token: i1.LazyStripeAPILoader }, { token: i2.WindowRef }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripeFactoryService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripeFactoryService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_STRIPE_VERSION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [STRIPE_PUBLISHABLE_KEY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [STRIPE_OPTIONS]
                }] }, { type: i1.LazyStripeAPILoader }, { type: i2.WindowRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9zZXJ2aWNlcy9zdHJpcGUtZmFjdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUtoSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFHekQsTUFBTSxPQUFPLG9CQUFvQjtJQUVNO0lBQ0k7SUFDUjtJQUN4QjtJQUNBO0lBTFQsWUFDcUMsT0FBZSxFQUNYLE9BQWUsRUFDdkIsV0FBcUMsRUFDN0QsTUFBMkIsRUFDM0IsTUFBaUI7UUFKVyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUN2QixnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFDN0QsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUN2QixDQUFDO0lBRUcsTUFBTSxDQUFDLEdBQVksRUFBRSxPQUFrQztRQUM1RCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0hBQWdILENBQ2pILENBQUM7UUFDSixDQUFDO1FBRUQsT0FBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RILENBQUM7dUdBakJVLG9CQUFvQixrQkFFckIsa0JBQWtCLGFBQ2xCLHNCQUFzQixhQUN0QixjQUFjOzJHQUpiLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFEaEMsVUFBVTs7MEJBR04sTUFBTTsyQkFBQyxrQkFBa0I7OzBCQUN6QixNQUFNOzJCQUFDLHNCQUFzQjs7MEJBQzdCLE1BQU07MkJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMgfSBmcm9tICdAc3RyaXBlL3N0cmlwZS1qcyc7XG5cbmltcG9ydCB7IE5HWF9TVFJJUEVfVkVSU0lPTiwgU1RSSVBFX09QVElPTlMsIFNUUklQRV9QVUJMSVNIQUJMRV9LRVkgfSBmcm9tICcuLi9pbnRlcmZhY2VzL25neC1zdHJpcGUuaW50ZXJmYWNlJztcblxuaW1wb3J0IHsgTGF6eVN0cmlwZUFQSUxvYWRlciB9IGZyb20gJy4vYXBpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJy4vd2luZG93LXJlZi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU3RyaXBlSW5zdGFuY2UgfSBmcm9tICcuL3N0cmlwZS1pbnN0YW5jZS5jbGFzcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHJpcGVGYWN0b3J5U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoTkdYX1NUUklQRV9WRVJTSU9OKSBwdWJsaWMgdmVyc2lvbjogc3RyaW5nLFxuICAgIEBJbmplY3QoU1RSSVBFX1BVQkxJU0hBQkxFX0tFWSkgcHVibGljIGJhc2VLZXk6IHN0cmluZyxcbiAgICBASW5qZWN0KFNUUklQRV9PUFRJT05TKSBwdWJsaWMgYmFzZU9wdGlvbnM6IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9ucyxcbiAgICBwdWJsaWMgbG9hZGVyOiBMYXp5U3RyaXBlQVBJTG9hZGVyLFxuICAgIHB1YmxpYyB3aW5kb3c6IFdpbmRvd1JlZlxuICApIHt9XG5cbiAgcHVibGljIGNyZWF0ZShrZXk/OiBzdHJpbmcsIG9wdGlvbnM/OiBTdHJpcGVDb25zdHJ1Y3Rvck9wdGlvbnMpOiBTdHJpcGVJbnN0YW5jZSB7XG4gICAgaWYgKCFrZXkgJiYgIXRoaXMuYmFzZUtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnTm8ga2V5IGRlZmluZWQhIEVpdGhlciB5b3UgbmVlZCB0byBwYXNzIGl0IGFzIGEgcGFyYW1ldGVyIG9yIGRlZmluZSBpdCB3aGVuIHlvdSBjYWxsIE5neFN0cmlwZU1vZHVsZS5mb3JSb290KCknXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3RyaXBlSW5zdGFuY2UodGhpcy52ZXJzaW9uLCB0aGlzLmxvYWRlciwgdGhpcy53aW5kb3csIGtleSB8fCB0aGlzLmJhc2VLZXksIG9wdGlvbnMgfHwgdGhpcy5iYXNlT3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==