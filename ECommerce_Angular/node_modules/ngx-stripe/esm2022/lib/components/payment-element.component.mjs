import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, Output, EventEmitter, Optional } from '@angular/core';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/elements.directive";
export class StripePaymentElementComponent {
    stripeElementsService;
    elementsProvider;
    stripeElementRef;
    element;
    elements;
    containerClass;
    options;
    elementsOptions;
    stripe;
    appearance;
    clientSecret;
    doNotCreateUntilClientSecretIsSet = false;
    load = new EventEmitter();
    blur = new EventEmitter();
    change = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    escape = new EventEmitter();
    loaderror = new EventEmitter();
    state = 'notready';
    elementsSubscription;
    constructor(stripeElementsService, elementsProvider) {
        this.stripeElementsService = stripeElementsService;
        this.elementsProvider = elementsProvider;
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        let updateElements = false;
        if (!this.elementsProvider &&
            (changes.elementsOptions || changes.stripe || changes.clientSecret || changes.appearance || !this.elements)) {
            this.elements = await this.stripeElementsService
                .elements(this.stripe, {
                ...(this.elementsOptions || {}),
                ...(this.appearance ? { appearance: this.appearance } : {}),
                ...(this.clientSecret ? { clientSecret: this.clientSecret } : {})
            })
                .toPromise();
            updateElements = true;
        }
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.createElement(options);
            }
        }
        this.state = 'ready';
    }
    async ngOnInit() {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.createElement(options);
                this.state = 'ready';
            });
        }
        else if (this.state === 'notready') {
            this.state = 'starting';
            this.elements = await this.stripeElementsService
                .elements(this.stripe, {
                ...(this.elementsOptions || {}),
                ...(this.appearance ? { appearance: this.appearance } : {}),
                ...(this.clientSecret ? { clientSecret: this.clientSecret } : {})
            })
                .toPromise();
            this.createElement(options);
            this.state = 'ready';
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    update(options) {
        return this.element.update(options);
    }
    collapse() {
        return this.element.collapse();
    }
    fetchUpdates() {
        return from(this.elements.fetchUpdates());
    }
    createElement(options = {}) {
        if (this.element) {
            this.element.unmount();
        }
        try {
            this.element = this.elements.create('payment', options);
        }
        catch (err) {
            this.elements = null;
            throw err;
        }
        this.element.on('change', (ev) => this.change.emit(ev));
        this.element.on('blur', (ev) => this.blur.emit(ev));
        this.element.on('focus', (ev) => this.focus.emit(ev));
        this.element.on('ready', (ev) => this.ready.emit(ev));
        this.element.on('escape', (ev) => this.escape.emit(ev));
        this.element.on('loaderror', (ev) => this.loaderror.emit(ev));
        this.element.mount(this.stripeElementRef.nativeElement);
        this.load.emit(this.element);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripePaymentElementComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.0", type: StripePaymentElementComponent, isStandalone: true, selector: "ngx-stripe-payment", inputs: { containerClass: "containerClass", options: "options", elementsOptions: "elementsOptions", stripe: "stripe", appearance: "appearance", clientSecret: "clientSecret", doNotCreateUntilClientSecretIsSet: "doNotCreateUntilClientSecretIsSet" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape", loaderror: "loaderror" }, viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `<div class="field" #stripeElementRef></div>`, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripePaymentElementComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-payment',
                    standalone: true,
                    template: `<div class="field" #stripeElementRef></div>`,
                    imports: [CommonModule]
                }]
        }], ctorParameters: () => [{ type: i1.StripeElementsService }, { type: i2.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }], propDecorators: { stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], appearance: [{
                type: Input
            }], clientSecret: [{
                type: Input
            }], doNotCreateUntilClientSecretIsSet: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }], loaderror: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,