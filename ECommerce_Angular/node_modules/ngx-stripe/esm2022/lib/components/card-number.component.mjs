import { CommonModule } from '@angular/common';
import { Component, Input, ViewChild, EventEmitter, Output, Optional, ContentChild, TemplateRef } from '@angular/core';
import { NgxStripeElementLoadingTemplateDirective } from '../directives/stripe-element-loading-template.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
import * as i2 from "../directives/card-group.directive";
import * as i3 from "../directives/elements.directive";
import * as i4 from "@angular/common";
export class StripeCardNumberComponent {
    stripeElementsService;
    cardGroup;
    elementsProvider;
    loadingTemplate;
    stripeElementRef;
    element;
    containerClass;
    options;
    load = new EventEmitter();
    blur = new EventEmitter();
    change = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    escape = new EventEmitter();
    elements;
    elementsSubscription;
    constructor(stripeElementsService, cardGroup, elementsProvider) {
        this.stripeElementsService = stripeElementsService;
        this.cardGroup = cardGroup;
        this.elementsProvider = elementsProvider;
    }
    async ngOnChanges(changes) {
        if (changes.options || changes.containerClass) {
            this.setupElement('options');
        }
    }
    ngOnInit() {
        if (this.cardGroup) {
            this.elementsSubscription = this.cardGroup.elements.subscribe((elements) => {
                this.elements = elements;
                this.setupElement('elements');
            });
        }
        else if (this.elementsProvider) {
            this.elementsSubscription = this.elementsProvider.elements.subscribe((elements) => {
                this.elements = elements;
                this.setupElement('elements');
            });
        }
        else {
            throw new Error('StripeCardNumberComponent must have StripeCardGroupDirective or StripeElementsDirective parent');
        }
    }
    ngOnDestroy() {
        if (this.element) {
            this.element.destroy();
        }
        if (this.elementsSubscription) {
            this.elementsSubscription.unsubscribe();
        }
    }
    update(options) {
        this.element.update(options);
    }
    /**
     * @deprecated
     */
    getCardNumber() {
        return this.element;
    }
    setupElement(source) {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        if (this.element && source === 'options') {
            this.update(options);
        }
        else if (this.elements && source === 'elements') {
            this.element = this.elements.create('cardNumber', options);
            this.element.on('change', (ev) => {
                this.change.emit(ev);
                this.cardGroup?.change.emit(ev);
            });
            this.element.on('blur', () => {
                this.blur.emit();
                this.cardGroup?.blur.emit();
            });
            this.element.on('focus', () => {
                this.focus.emit();
                this.cardGroup?.focus.emit();
            });
            this.element.on('ready', () => {
                this.ready.emit();
                this.cardGroup?.ready.emit();
            });
            this.element.on('escape', () => {
                this.escape.emit();
                this.cardGroup?.escape.emit();
            });
            this.element.mount(this.stripeElementRef.nativeElement);
            this.load.emit(this.element);
            this.cardGroup?.load.emit(this.element);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripeCardNumberComponent, deps: [{ token: i1.StripeElementsService }, { token: i2.StripeCardGroupDirective, optional: true }, { token: i3.StripeElementsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.0", type: StripeCardNumberComponent, isStandalone: true, selector: "ngx-stripe-card-number", inputs: { containerClass: "containerClass", options: "options" }, outputs: { load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape" }, queries: [{ propertyName: "loadingTemplate", first: true, predicate: NgxStripeElementLoadingTemplateDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="field" #stripeElementRef>
      @if (cardGroup && cardGroup.state !== 'ready' && loadingTemplate) {
        <ng-container [ngTemplateOutlet]="loadingTemplate" />
      }
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.0", ngImport: i0, type: StripeCardNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-card-number',
                    standalone: true,
                    template: `
    <div class="field" #stripeElementRef>
      @if (cardGroup && cardGroup.state !== 'ready' && loadingTemplate) {
        <ng-container [ngTemplateOutlet]="loadingTemplate" />
      }
    </div>
  `,
                    imports: [CommonModule]
                }]
        }], ctorParameters: () => [{ type: i1.StripeElementsService }, { type: i2.StripeCardGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.StripeElementsDirective, decorators: [{
                    type: Optional
                }] }], propDecorators: { loadingTemplate: [{
                type: ContentChild,
                args: [NgxStripeElementLoadingTemplateDirective, { read: TemplateRef }]
            }], stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], options: [{
                type: Input
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,